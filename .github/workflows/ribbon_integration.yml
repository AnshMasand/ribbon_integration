name: Ribbon Integration

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  analyze_pull_request:
    runs-on: ubuntu-latest

    steps:
      - name: Checks out repository
        uses: actions/checkout@v3
        with:
         fetch-depth: 0 # grab all branches
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          pip install openai     

      - name: Create directory
        run: |
          mkdir .github/workflows/ribbon_awards
          echo "Directory created successfully"

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Create ribbon_awards directory"
          git push
          
      - name: Analyze Pull Request
        id: analyze
        run: |
          # Retrieve the pull request details using the Github API
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          PR_TITLE=$(jq --raw-output .pull_request.title "$GITHUB_EVENT_PATH")
          PR_DESCRIPTION=$(jq --raw-output .pull_request.body "$GITHUB_EVENT_PATH")
          PR_RECIPIENT=$(jq --raw-output .sender.login "$GITHUB_EVENT_PATH")
          
          git fetch origin "pull/${{ github.event.pull_request.number }}/head:pr_branch"
          PR_DIFF=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...pr_branch)

          # Generate code changes summary
          SUMMARY="this is a summary without OPENAI api key"
          

          RIBBON_AWARD=$(jq -n --arg recipient "$PR_RECIPIENT" --arg title "$PR_TITLE" --arg description "$PR_DESCRIPTION" --arg additional_description "$SUMMARY" \
                        '{"recipient": $recipient, "title": $title, "description": $description, "additional_description": $additional_description}')

          # Generate the filename using the user and PR number
          FILENAME="${PR_RECIPIENT//[^a-zA-Z0-9]/_}_PR${PR_NUMBER}.json"

          # Store the Ribbon Award JSON in a file
          echo $RIBBON_AWARD >> ".github/workflows/ribbon_awards/$FILENAME"
           
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Create ribbon_awards file"
          git push

          # Output the path to the Ribbon Award JSON file
          echo "::set-output name=ribbon_award_path::$GITHUB_WORKSPACE/.github/workflows/ribbon_awards/$FILENAME"
          
          # Output the Ribbon Award JSON
          echo "::set-output name=ribbon_award::$RIBBON_AWARD"
